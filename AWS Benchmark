import vectorbt as vbt
import yfinance as yf
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from scipy.optimize import least_squares
from sklearn.metrics import r2_score
import warnings
from lppls import lppls
import time
from vectorbt.portfolio.enums import SizeType
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from vectorbt.generic.plotting import Scatter

warnings.filterwarnings('ignore')

# S&P 500 stocks
url = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'
tables = pd.read_html(url)
table = tables[0]
stocks = table['Symbol'].tolist()
stocks.remove('BRK.B')
stocks.remove('BF.B')
stocks.remove('GEHC')
stocks.remove('CEG')
stocks.remove('OTIS')
stocks.remove('CARR')
stocks.remove('OGN')
stocks100 = stocks[:100]
stocks10 = stocks[:10]

# Parameters
model_window_param = 120
b_weight_param = 0.9
r2_weight_param = 0.1
signal_threshold_param = 80
days_before_tc_param = 7
max_searches_param = 25

# Date range
start_date='2020-01-01'
end_date='2023-06-27'

#Helper functions
def loss(params, x, y):
    return func(x, *params) - y

def func(x, a, b, c):
    return a * np.exp(b * x) + c

start_time = time.time()

def compute_fetch_start_date(start_date, model_window):
    start_date_dt = pd.to_datetime(start_date)
    business_days = 0
    current_date = start_date_dt
    while business_days < model_window:
        current_date -= pd.DateOffset(days=1)
        if current_date.dayofweek < 5:  # It's a weekday
            business_days += 1
    return current_date.strftime("%Y-%m-%d")

fetch_start_date = compute_fetch_start_date(start_date, model_window_param)

#Downloading S&P 500 data
benchmark = yf.download(stocks, start=start_date, end=end_date)['Adj Close']
benchmark_pf = vbt.Portfolio.from_holding(benchmark)

benchmark_stats = benchmark_pf.stats()
print("\nBenchmark stats:")
print(benchmark_stats)

print(f"Sharpe ratio: {benchmark_pf.sharpe_ratio(group_by = True, freq='D')}")
print(f"Sortino ratio: {benchmark_pf.sortino_ratio(group_by = True, freq='D')}")

end_time = time.time()
print(f'Time taken: {end_time - start_time} seconds')
