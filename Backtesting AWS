import vectorbt as vbt
import yfinance as yf
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from scipy.optimize import least_squares
from sklearn.metrics import r2_score
import warnings
from lppls import lppls
import time
from vectorbt.portfolio.enums import SizeType

warnings.filterwarnings('ignore')

# Downloading the list of tickers in the S&P 500, removing BRK.B and BF.B as these always cause issues. 
# stocks100 is simply the first 100 stocks (just used for testing)
url = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'
tables = pd.read_html(url)
table = tables[0]
stocks = table['Symbol'].tolist()
stocks.remove('BRK.B')
stocks.remove('BF.B')
stocks100 = stocks[:100]
stocks10 = stocks[:10]

# The start and end dates for the backtest. Data will be fetched from a certain time before that for modelling purposes.
start_date='2022-10-15'
end_date='2023-06-15'


# Loss function to calculate value of r^2
def loss(params, x, y):
    return func(x, *params) - y

# Exponential function for modelling
def func(x, a, b, c):
    return a * np.exp(b * x) + c

# This is the actual indicator. Currently, it is based on the modelling of the log of 5-day moving average of the price data
# model_window days before the current date to an exponential curve. This modelling happens every 30 days (but can be modified).
# This is slightly arbitrary, but is just a starting point I chose, where the threshold depends on the multiple of the
# model's exponent and its r^2 value, ie how closely it resembles a faster-than-exponential growth. If the model meets the
# requirements, we fit it to the LPPL model. I have tried doing the normal curve_fit in this case, but that takes an 
# incredibly long time. However, there is an lppl library in Python which is very efficient and, having visualised it, 
# seems to be quite good at fitting. There is a parameter, max_searches, which can be adjusted to prevent overfitting etc.
# Then, if the predicted bubble burst is more than 14 days into the future, we buy the stock, and sell it 14 days before tc.
# We sell everything at the end of the window.
def exp_growth_and_r2(close, model_window=120, r2_b_threshold=0.0005, days_before_tc=7, max_searches=20):
    try:
        output = np.zeros(len(close))
        for i in range(model_window, len(close), 30):
            historical_data = close.iloc[i-model_window:i]
            historical_data = historical_data.rolling(window = 5).mean().dropna()

            historical_data.dropna(inplace=True)

            xdata = (historical_data.index - historical_data.index[0]).days.values
            ydata = historical_data.values
            log_ydata = np.log(ydata + 1).ravel()

            res = least_squares(loss, x0=(1, 0.01, 1), args=(xdata, log_ydata))

            fitted_y = func(xdata, *res.x).ravel()

            a, b, c = res.x
            r2 = r2_score(log_ydata, fitted_y)
            
            if r2 * b > r2_b_threshold:
                time = [pd.Timestamp.toordinal(t) for t in historical_data.index]

                price = np.log(historical_data.values).ravel()

                observations = np.array([time, price])

                tcs = []

                for _ in range(5):
                    lppls_model = lppls.LPPLS(observations=observations)
                    tc, m, w, a, b, c1, c2, phi, O, D = lppls_model.fit(max_searches)
                    tcs.append(tc)

                tc = np.median(tcs)
                tc = tc - datetime.toordinal(historical_data.index[-1])
                
                if tc > 14:
                    output[i] = 1
                    if i+int(round(tc))-14 < len(output):
                        output[i+int(round(tc))-14]=-1
                
        output[-1] = -1
        return output
    
    except Exception as e:
        print(f"Couldn't process stock. Error: {str(e)}")

# Creating the indicator
BuyIndicator = vbt.IndicatorFactory(
    input_names=['close'],
    param_names=['model_window', 'r2_b_threshold', 'days_before_tc', 'max_searches'],
    output_names=['buy_indicator']
).from_apply_func(exp_growth_and_r2,
                model_window=90, 
                r2_b_threshold=0.001, 
                days_before_tc=14, 
                max_searches=25,
                keep_pd=True,
                per_column=True)
                
                
# We want to start the data fetch model_window days before the start of the backtest so we can run modelling on the first data
fetch_start_date_dt = datetime.strptime(start_date, "%Y-%m-%d") - timedelta(days=90)
fetch_start_date = fetch_start_date_dt.strftime("%Y-%m-%d")

start_time = time.time()

# Downloading stock data
data = yf.download(stocks10, start=fetch_start_date, end=end_date)['Close']
data = data.ffill().bfill()

# Not particularly important- our starting capital for assigned to each stock
initial_capital = 1000000

# Running the data through our indicator- days when we buy will have a value of 1, and when we sell -1. 0 otherwise
buy_indicator = BuyIndicator.run(data, model_window=120, r2_b_threshold=0.001, days_before_tc=7, max_searches=20)

entry_signal = buy_indicator.buy_indicator == 1
exit_signal = buy_indicator.buy_indicator == -1

# Dropping some extra columns to make it match data
entry_signal.columns = entry_signal.columns.droplevel(['custom_model_window', 'custom_r2_b_threshold', 'custom_days_before_tc', 'custom_max_searches'])

# Cropping the data for the backtest to make it faster
data = data.loc[start_date:end_date]
entry_signal = entry_signal.loc[start_date:end_date]
exit_signal = exit_signal.loc[start_date:end_date]

# # Assigning an equal proportion of the capital to each stock, investing it all when we get an entr signal
#num_stocks_to_buy = entry_signal.sum(axis=1)
#weights = entry_signal.div(num_stocks_to_buy, axis=0)
#weights = weights.mul(initial_capital / data).fillna(0)

# Creating the portfolio. Can change fees as desired
portfolio = vbt.Portfolio.from_signals(
    data,
    entry_signal,
    exit_signal,
    init_cash=initial_capital,
#    size=weights,
#    size_type='Amount',
    fees=0.001
)

# Printing stats- can add extra info about the portfolio at this point
print(portfolio.stats(group_by = True))

#total_portfolio_value = portfolio.value().sum(axis=1)
#total_portfolio_value.vbt.plot().show()

print(f"Average exposure: {portfolio.gross_exposure(group_by = True).mean()}")

exposure = portfolio.gross_exposure(group_by=True)

# Get the returns of the portfolio for each day
returns = portfolio.returns(group_by=True)

# Adjust the returns by the gross exposure
adjusted_returns = returns / exposure

# Handle cases where exposure is zero (to avoid division by zero)
adjusted_returns = adjusted_returns.replace([np.inf, -np.inf], np.nan)

adjusted_total_returns = (adjusted_returns + 1).cumprod() - 1

final_adjusted_total_return = adjusted_total_returns.iloc[-2]

print(f"Final adjusted total return: {final_adjusted_total_return}")

print(f"Sharpe ratio: {portfolio.sharpe_ratio(group_by = True, freq='D')}")

end_time = time.time()
print(f'Time taken: {end_time - start_time} seconds')
