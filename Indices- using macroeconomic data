import vectorbt as vbt
import yfinance as yf
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from scipy.optimize import least_squares
from sklearn.metrics import r2_score
import warnings
from lppls import lppls
import time
from vectorbt.portfolio.enums import SizeType
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from vectorbt.generic.plotting import Scatter

warnings.filterwarnings('ignore')

# S&P 500 stocks
url = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'
tables = pd.read_html(url)
table = tables[0]
stocks = table['Symbol'].tolist()
stocks.remove('BRK.B')
stocks.remove('BF.B')
stocks.remove('GEHC')
stocks.remove('CEG')
stocks.remove('OTIS')
stocks.remove('CARR')
stocks.remove('OGN')
stocks100 = stocks[:100]
stocks10 = stocks[:10]

# Parameters
model_window_param = 70
b_weight_param = 0.75
r2_weight_param = 0.25
signal_threshold_param = 65
buy_back_param = 30
max_searches_param = 20
days_after_tc_param = 30

# Date range
start_date='2022-01-01'
end_date='2023-01-01'

index_symbol = 'VCR'

#Helper functions
def loss(params, x, y):
    return func(x, *params) - y

def func(x, a, b, c):
    return a * np.exp(b * x) + c

def compute_fetch_start_date(start_date, model_window):
    start_date_dt = pd.to_datetime(start_date)
    business_days = 0
    current_date = start_date_dt
    while business_days < model_window:
        current_date -= pd.DateOffset(days=1)
        if current_date.dayofweek < 5:  # It's a weekday
            business_days += 1
    return current_date.strftime("%Y-%m-%d")

fetch_start_date = compute_fetch_start_date(start_date, model_window_param)

# Downloading data
data = yf.download(index_symbol, start=fetch_start_date, end=end_date)['Close']
data = data.ffill().bfill()

print(data)

def analyze_stock(data, model_window):
    df_b = pd.DataFrame()
    df_r2 = pd.DataFrame()

    for i in range(model_window, len(data), 30):
        df = data

        historical_data = df.iloc[i-model_window:i]
        historical_data = historical_data.rolling(window=5).mean().dropna()
        xdata = (historical_data.index - historical_data.index[0]).days.values
        ydata = historical_data.values
        log_ydata = np.log(ydata + 1).ravel()
        res = least_squares(loss, x0=(1, 0.01, 1), args=(xdata, log_ydata))
        fitted_y = func(xdata, *res.x).ravel()
        a, b, c = res.x
        r2 = r2_score(log_ydata, fitted_y)

        # Apply standard scaling to b and r2 values for this time period
        scaler = StandardScaler() 
        b_values = scaler.fit_transform(np.array([b]).reshape(-1, 1)).ravel()
        r2_values = scaler.fit_transform(np.array([r2]).reshape(-1, 1)).ravel()

        # Add these values to our dataframes
        df_b_temp = pd.DataFrame(b_values, index=[df.index[i]])
        df_r2_temp = pd.DataFrame(r2_values, index=[df.index[i]])
        df_b = pd.concat([df_b, df_b_temp])
        df_r2 = pd.concat([df_r2, df_r2_temp])

    return df_b, df_r2

# Creating dataframes for b and r2 values
df_b_values, df_r2_values = analyze_stock(data, model_window_param)
df_b_values = df_b_values.loc[~df_b_values.index.duplicated(keep='first')]
df_r2_values = df_r2_values.loc[~df_r2_values.index.duplicated(keep='first')]
df_b_values = df_b_values.reindex(data.index)
df_r2_values = df_r2_values.reindex(data.index)

def exp_growth_and_r2(close,
                    df_b_values,
                    df_r2_values,
                    model_window=model_window_param,
                    signal_threshold=signal_threshold_param,
                    b_weight = b_weight_param,
                    r2_weight = r2_weight_param,
                    buy_back=buy_back_param,
                    max_searches=max_searches_param,
                    days_after_tc=days_after_tc_param):

    output = np.zeros(len(close))
    for i in range(model_window, len(close), 30):
        if close.index[i] not in df_b_values.index or close.index[i] not in df_r2_values.index:
            continue

        b_value = df_b_values.loc[close.index[i], ticker]
        r2_value = df_r2_values.loc[close.index[i], ticker]
        b_norm_value = 50 + (100 / 3) * b_value
        r2_norm_value = 50 + (100 / 3) * r2_value
        signal = b_norm_value * b_weight + r2_norm_value * r2_weight

        if signal > signal_threshold and close.iloc[i] > close.iloc[i - model_window]:
            historical_data = close.iloc[i-model_window:i]  
            time = [pd.Timestamp.toordinal(t) for t in historical_data.index]
            price = np.log(historical_data.values).ravel()
            observations = np.array([time, price])
            tcs = []
            for _ in range(7):
                lppls_model = lppls.LPPLS(observations=observations)
                tc, m, w, a, b, c1, c2, phi, O, D = lppls_model.fit(max_searches)
                tcs.append(tc)
            tc = np.median(tcs)
            tc = tc - datetime.toordinal(historical_data.index[-1])
            
            if tc < buy_back:  
                output[i] = -1
                if (i + buy_back + days_after_tc) < len(close):
                    output[i + buy_back + days_after_tc] = 1  # Buy back the stock after 'days_after_tc' days
    return output

# Creating the indicator
BuyIndicator = vbt.IndicatorFactory(
    input_names=['close', 'df_b_values', 'df_r2_values'],
    param_names=['model_window',
                'signal_threshold',
                'b_weight',
                'r2_weight',
                'days_after_tc',
                'max_searches',
                'buy_back'],
    output_names=['buy_indicator']
).from_apply_func(exp_growth_and_r2,
                model_window=model_window_param,
                signal_threshold=signal_threshold_param,
                b_weight = b_weight_param,
                r2_weight = r2_weight_param,
                buy_back=buy_back_param,
                max_searches=max_searches_param,
                days_after_tc=days_after_tc_param,
                keep_pd=True,
                per_column=True)

# Running the data through our indicator- days when we buy will have a value of 1, and when we sell -1. 0 otherwise
buy_indicator = BuyIndicator.run(data,
                                df_b_values,
                                df_r2_values,
                                model_window=model_window_param,
                                signal_threshold=signal_threshold_param,
                                b_weight = b_weight_param,
                                r2_weight = r2_weight_param,
                                buy_back=buy_back_param,
                                max_searches=max_searches_param,
                                days_after_tc=days_after_tc_param)

# Getting the entry_signal and exit_signal series
entry_signal = buy_indicator.buy_indicator == 1
exit_signal = buy_indicator.buy_indicator == -1

# Dropping some extra columns to make it match data
entry_signal.columns = entry_signal.columns.droplevel(['custom_model_window', 'custom_signal_threshold', 'custom_b_weight', 'custom_r2_weight', 'custom_buy_back', 'custom_max_searches', 'custom_days_after_tc'])

# Cropping the data for the backtest to make it faster
data = data.loc[start_date:end_date]
entry_signal = entry_signal.loc[start_date:end_date]
exit_signal = exit_signal.loc[start_date:end_date]

entry_signal.iloc[0] = True

# Assigning an equal proportion of the capital to each stock, investing it all when we get an entr signal
#num_stocks_to_buy = entry_signal.sum(axis=1)
#weights = entry_signal.div(num_stocks_to_buy, axis=0)
#weights = weights.mul(initial_capital / data).fillna(0)

# Creating the portfolio. Can change fees as desired
portfolio = vbt.Portfolio.from_signals(
    data,
    entry_signal,
    exit_signal,
    init_cash=initial_capital,
#    size=weights,
#    size_type='Amount',
    fees=0.001
)

# Add the benchmark returns to the portfolio stats
print(portfolio.stats(metrics = ["start", 
                                 "end", 
                                 "period", 
                                 "start_value", 
                                 "end_value", 
                                 "total_return", 
                                 "benchmark_return",
                                 "max_gross_exposure", 
                                 "total_fees_paid", 
                                 "max_dd", 
                                 "total_trades", 
                                 "win_rate", 
                                 "profit_factor", 
                                 "expectancy", 
                                 "sharpe_ratio", 
                                 "sortino_ratio"], group_by = True))

# Get exposure for the entire duration of portfolio
exposure = portfolio.gross_exposure(group_by=True)

print(f"Average exposure: {exposure.mean()}")

# Get the returns of the portfolio for each day
returns = portfolio.returns(group_by=True)

# Adjust the returns by the gross exposure
adjusted_returns = returns / exposure

# Handle cases where exposure is zero (to avoid division by zero)
adjusted_returns = adjusted_returns.replace([np.inf, -np.inf], np.nan)
adjusted_total_returns = (adjusted_returns + 1).cumprod() - 1
final_adjusted_total_return = adjusted_total_returns.iloc[-2]
print(f"Final adjusted total return: {final_adjusted_total_return * 100:.2f}%")

# Getting Sharpe and Sortino ratios
print(f"Sharpe ratio: {portfolio.sharpe_ratio(group_by = True, freq='D')}")
print(f"Sortino ratio: {portfolio.sortino_ratio(group_by = True, freq='D')}")

#Downloading S&P 500 data
hold_data = data
hold_portfolio = vbt.Portfolio.from_holding(hold_data, init_cash=initial_capital, fees=0.001)

benchmark_stats = hold_portfolio.stats()
print("\nBenchmark stats:")
print(benchmark_stats)

print(f"Sharpe ratio: {hold_portfolio.sharpe_ratio(group_by = True, freq='D')}")
print(f"Sortino ratio: {hold_portfolio.sortino_ratio(group_by = True, freq='D')}")

end_time = time.time()
print(f'Time taken: {end_time - start_time} seconds')
